identity:
  name: search_dataset
  author: juntiankeji
  label:
    en_US: 知识库名称检索
    ja_JP: 知识库名称检索
    zh_Hans: 知识库名称检索
    pt_BR: 知识库名称检索
description:
  human:
    en_US: 以 知识库ID 的形式通过知识库名称检索已创建的知识库。
    ja_JP: 以 知识库ID 的形式通过知识库名称检索已创建的知识库。
    zh_Hans: 以 知识库ID 的形式通过知识库名称检索已创建的知识库。
    pt_BR: 以 知识库ID 的形式通过知识库名称检索已创建的知识库。
  llm: 以 知识库ID 的形式通过知识库名称检索已创建的知识库。
parameters:
  - name: api_base_url
    type: string
    label:
      en_US: API Base URL
    human_description:
      en_US: >-
        The base URL of the Knowledge API, with trailing "/v1".
        Example: "https://api.dify.ai/v1", "http://api:5001/v1".
      ja_JP: >-
        ナレッジ API のベース URL（末尾に "/v1" を付ける）。
        例: "https://api.dify.ai/v1", "http://api:5001/v1"。
      zh_Hans: >-
        Knowledge API 的基础 URL，结尾带有 "/v1"。
        例如: "https://api.dify.ai/v1", "http://api:5001/v1"。
      pt_BR: >-
        A URL base da API do Knowledge, terminando com "/v1".
        Exemplo: "https://api.dify.ai/v1", "http://api:5001/v1".
    required: true
    default: ""
    form: llm

  - name: api_key
    type: secret-input
    label:
      en_US: API Key
    human_description:
      en_US: >-
        The API key for the Knowledge API.
        You can generate it at "Knowledge" -> "API Access" -> "API Key" in the Dify Console.
      ja_JP: >-
        ナレッジ API の API キー。
        Dify のコンソールの "Knowledge" -> "API Access" -> "API Key" で発行できる。
      zh_Hans: >-
        Knowledge API 的 API 密钥。
        可以在 Dify 控制台的“Knowledge”->“API Access”->“API Key”中生成。
      pt_BR: >-
        A chave de API para o Knowledge API。
        Você pode gerá-la em "Knowledge" -> "API Access" -> "API Key" no Console Dify.
    required: true
    default: ""
    form: llm

  - name: knowledge_name
    type: string
    label:
      en_US: Knowledge Name
    human_description:
      en_US: >-
        要检索的关键词。
      ja_JP: >-
        要检索的关键词。
      zh_Hans: >-
        要检索的关键词。
      pt_BR: >-
        要检索的关键词。
    required: false
    default: ""
    form: llm
  - name: limit
    type: number
    label:
      en_US: Limit of the output
    human_description:
      en_US: >-
        输出的数量限制,-1为无限制
      ja_JP: >-
        输出的数量限制,-1为无限制
      zh_Hans: >-
        输出的数量限制,-1为无限制
      pt_BR: >-
        输出的数量限制,-1为无限制
    required: false
    default: "-1"
    form: llm
  - name: return
    type: select
    label:
      en_US: Return Value
    human_description:
      en_US: >-
       输出的类型。可选择单一ID,全部ID或者是全部知识库元数据
      ja_JP: >-
        输出的类型。
      zh_Hans: >-
        输出的类型。
      pt_BR: >-
        输出的类型。
    options:
      - value: "AnyId"
        label:
          en_US: "Any Id"
      - value: "AllId"
        label:
          en_US: "All Id"
      - value: "Meta"
        label: 
          en_US: "Meta"
    required: true
    default: "AllId"
    form: form
  - name: type
    type: select
    label:
      en_US: Return Type
    human_description:
      en_US: >-
        输出的方式。String Concat将会以逗号连接数据的字符串形式,String List将会以{list:[...]}的形式返回字符串列表,Json List将会以Json列表的形式返回若干Json对象(字符串会被包装在{value:...}中)
      ja_JP: >-
        输出的方式。String Concat将会以逗号连接数据的字符串形式,String List将会以{list:[...]}的形式返回字符串列表,Json List将会以Json列表的形式返回若干Json对象(字符串会被包装在{value:...}中)
      zh_Hans: >-
        输出的方式。String Concat将会以逗号连接数据的字符串形式,String List将会以{list:[...]}的形式返回字符串列表,Json List将会以Json列表的形式返回若干Json对象(字符串会被包装在{value:...}中)
      pt_BR: >-
        输出的方式。String Concat将会以逗号连接数据的字符串形式,String List将会以{list:[...]}的形式返回字符串列表,Json List将会以Json列表的形式返回若干Json对象(字符串会被包装在{value:...}中)
    options:
      - value: "string_concat"
        label:
          en_US: "String Concat"
      - value: "string_list"
        label:
          en_US: "String List"
      - value: "json_list"
        label: 
          en_US: "Json List"
    required: true
    default: "string_concat"
    form: form

extra:
  python:
    source: tools/search_dataset/search_dataset.py
